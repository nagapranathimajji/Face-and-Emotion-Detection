# -*- coding: utf-8 -*-
"""FaceNet_HaarCascade_Colab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tm0q97LdgTZz59Zih7aKGN9wdqyleNjC

# Face Recognition with Haar Cascades + FaceNet (CPU-Friendly Version)

This Colab notebook uses Haar Cascades for face detection and FaceNet for face embeddings. No GPU required.
"""

# Install necessary packages
!pip install mtcnn keras-facenet opencv-python-headless

from google.colab import files
uploaded = files.upload()
# Upload two images: known_face.jpg and test_face.jpg

from google.colab import drive
drive.mount('/content/drive')

import cv2
import numpy as np
from keras_facenet import FaceNet
from PIL import Image
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib.pyplot as plt

# Load Haar Cascade model
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

def detect_and_crop_face(image_path):
    img = cv2.imread(image_path)
    # Add a check to see if the image was read successfully
    if img is None:
        raise FileNotFoundError(f"Error: Image not found or could not be read at path: {image_path}")

    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, 1.1, 4)

    if len(faces) == 0:
        raise ValueError("No face detected in image.")

    x, y, w, h = faces[0]
    face_img = img[y:y+h, x:x+w]
    face_img = cv2.resize(face_img, (160, 160))
    return face_img

# Replace these with your image file names
known_img = detect_and_crop_face("known_face.jpg")
test_img = detect_and_crop_face("test_face.jpg")

embedder = FaceNet()
known_embed = embedder.embeddings([known_img])[0]
test_embed = embedder.embeddings([test_img])[0]

sim_score = cosine_similarity([known_embed], [test_embed])[0][0]
print(f"Cosine Similarity Score: {sim_score:.4f}")

if sim_score > 0.6:
    print("✅ Faces Match!")
else:
    print("❌ Faces Do Not Match")

def show_images(img1, img2):
    fig, axs = plt.subplots(1, 2, figsize=(8,4))
    axs[0].imshow(cv2.cvtColor(img1, cv2.COLOR_BGR2RGB))
    axs[0].set_title("Known Face")
    axs[1].imshow(cv2.cvtColor(img2, cv2.COLOR_BGR2RGB))
    axs[1].set_title("Test Face")
    for ax in axs:
        ax.axis('off')
    plt.show()

show_images(known_img, test_img)